// Generated by Create API
// https://github.com/CreateAPI/CreateAPI
//
// swiftlint:disable all

import Foundation
import Get
import URLQueryEncoder

extension APIEndpoint.Apps {
	public func id(_ id: String) -> WithID {
		WithID(path: "\(path)/\(id)")
	}

	public struct WithID {
		/// Path: `/v1/apps/{id}`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.AppResponse> {
			.get(path, query: parameters?.asQuery)
		}

		public struct GetParameters {
			public var fieldsApps: [FieldsApps]?
			public var include: [Include]?
			public var fieldsBetaLicenseAgreements: [FieldsBetaLicenseAgreements]?
			public var fieldsBetaAppReviewDetails: [FieldsBetaAppReviewDetails]?
			public var fieldsAppClips: [FieldsAppClips]?
			public var fieldsAppInfos: [FieldsAppInfos]?
			public var fieldsBetaAppLocalizations: [FieldsBetaAppLocalizations]?
			public var fieldsAppPricePoints: [FieldsAppPricePoints]?
			public var fieldsInAppPurchases: [FieldsInAppPurchases]?
			public var fieldsPreReleaseVersions: [FieldsPreReleaseVersions]?
			public var fieldsCiProducts: [FieldsCiProducts]?
			public var fieldsReviewSubmissions: [FieldsReviewSubmissions]?
			public var fieldsAppPrices: [FieldsAppPrices]?
			public var fieldsAppPreOrders: [FieldsAppPreOrders]?
			public var fieldsBetaGroups: [FieldsBetaGroups]?
			public var fieldsGameCenterEnabledVersions: [FieldsGameCenterEnabledVersions]?
			public var fieldsEndUserLicenseAgreements: [FieldsEndUserLicenseAgreements]?
			public var fieldsAppStoreVersions: [FieldsAppStoreVersions]?
			public var fieldsAppCustomProductPages: [FieldsAppCustomProductPages]?
			public var fieldsAppEvents: [FieldsAppEvents]?
			public var fieldsTerritories: [FieldsTerritories]?
			public var fieldsPerfPowerMetrics: [FieldsPerfPowerMetrics]?
			public var fieldsBuilds: [FieldsBuilds]?
			public var limitAppClips: Int?
			public var limitAppCustomProductPages: Int?
			public var limitAppEvents: Int?
			public var limitAppInfos: Int?
			public var limitAppStoreVersions: Int?
			public var limitAvailableTerritories: Int?
			public var limitBetaAppLocalizations: Int?
			public var limitBetaGroups: Int?
			public var limitBuilds: Int?
			public var limitGameCenterEnabledVersions: Int?
			public var limitInAppPurchases: Int?
			public var limitPreReleaseVersions: Int?
			public var limitPrices: Int?
			public var limitReviewSubmissions: Int?

			public enum FieldsApps: String, Codable, CaseIterable {
				case appClips
				case appCustomProductPages
				case appEvents
				case appInfos
				case appStoreVersions
				case availableInNewTerritories
				case availableTerritories
				case betaAppLocalizations
				case betaAppReviewDetail
				case betaGroups
				case betaLicenseAgreement
				case betaTesters
				case builds
				case bundleID = "bundleId"
				case ciProduct
				case contentRightsDeclaration
				case endUserLicenseAgreement
				case gameCenterEnabledVersions
				case inAppPurchases
				case isOrEverWasMadeForKids
				case name
				case perfPowerMetrics
				case preOrder
				case preReleaseVersions
				case pricePoints
				case prices
				case primaryLocale
				case reviewSubmissions
				case sku
				case subscriptionStatusURL = "subscriptionStatusUrl"
				case subscriptionStatusURLForSandbox = "subscriptionStatusUrlForSandbox"
				case subscriptionStatusURLVersion = "subscriptionStatusUrlVersion"
				case subscriptionStatusURLVersionForSandbox = "subscriptionStatusUrlVersionForSandbox"
			}

			public enum Include: String, Codable, CaseIterable {
				case appClips
				case appCustomProductPages
				case appEvents
				case appInfos
				case appStoreVersions
				case availableTerritories
				case betaAppLocalizations
				case betaAppReviewDetail
				case betaGroups
				case betaLicenseAgreement
				case builds
				case ciProduct
				case endUserLicenseAgreement
				case gameCenterEnabledVersions
				case inAppPurchases
				case preOrder
				case preReleaseVersions
				case prices
				case reviewSubmissions
			}

			public enum FieldsBetaLicenseAgreements: String, Codable, CaseIterable {
				case agreementText
				case app
			}

			public enum FieldsBetaAppReviewDetails: String, Codable, CaseIterable {
				case app
				case contactEmail
				case contactFirstName
				case contactLastName
				case contactPhone
				case demoAccountName
				case demoAccountPassword
				case demoAccountRequired
				case notes
			}

			public enum FieldsAppClips: String, Codable, CaseIterable {
				case app
				case appClipAdvancedExperiences
				case appClipDefaultExperiences
				case bundleID = "bundleId"
			}

			public enum FieldsAppInfos: String, Codable, CaseIterable {
				case ageRatingDeclaration
				case app
				case appInfoLocalizations
				case appStoreAgeRating
				case appStoreState
				case brazilAgeRating
				case kidsAgeBand
				case primaryCategory
				case primarySubcategoryOne
				case primarySubcategoryTwo
				case secondaryCategory
				case secondarySubcategoryOne
				case secondarySubcategoryTwo
			}

			public enum FieldsBetaAppLocalizations: String, Codable, CaseIterable {
				case app
				case description
				case feedbackEmail
				case locale
				case marketingURL = "marketingUrl"
				case privacyPolicyURL = "privacyPolicyUrl"
				case tvOsPrivacyPolicy
			}

			public enum FieldsAppPricePoints: String, Codable, CaseIterable {
				case app
				case customerPrice
				case priceTier
				case proceeds
				case territory
			}

			public enum FieldsInAppPurchases: String, Codable, CaseIterable {
				case apps
				case inAppPurchaseType
				case productID = "productId"
				case referenceName
				case state
			}

			public enum FieldsPreReleaseVersions: String, Codable, CaseIterable {
				case app
				case builds
				case platform
				case version
			}

			public enum FieldsCiProducts: String, Codable, CaseIterable {
				case additionalRepositories
				case app
				case buildRuns
				case bundleID = "bundleId"
				case createdDate
				case name
				case primaryRepositories
				case productType
				case workflows
			}

			public enum FieldsReviewSubmissions: String, Codable, CaseIterable {
				case app
				case appStoreVersionForReview
				case canceled
				case items
				case platform
				case state
				case submitted
				case submittedDate
			}

			public enum FieldsAppPrices: String, Codable, CaseIterable {
				case app
				case priceTier
			}

			public enum FieldsAppPreOrders: String, Codable, CaseIterable {
				case app
				case appReleaseDate
				case preOrderAvailableDate
			}

			public enum FieldsBetaGroups: String, Codable, CaseIterable {
				case app
				case betaTesters
				case builds
				case createdDate
				case feedbackEnabled
				case hasAccessToAllBuilds
				case iosBuildsAvailableForAppleSiliconMac
				case isInternalGroup
				case name
				case publicLink
				case publicLinkEnabled
				case publicLinkID = "publicLinkId"
				case publicLinkLimit
				case publicLinkLimitEnabled
			}

			public enum FieldsGameCenterEnabledVersions: String, Codable, CaseIterable {
				case app
				case compatibleVersions
				case iconAsset
				case platform
				case versionString
			}

			public enum FieldsEndUserLicenseAgreements: String, Codable, CaseIterable {
				case agreementText
				case app
				case territories
			}

			public enum FieldsAppStoreVersions: String, Codable, CaseIterable {
				case ageRatingDeclaration
				case app
				case appClipDefaultExperience
				case appStoreReviewDetail
				case appStoreState
				case appStoreVersionExperiments
				case appStoreVersionLocalizations
				case appStoreVersionPhasedRelease
				case appStoreVersionSubmission
				case build
				case copyright
				case createdDate
				case downloadable
				case earliestReleaseDate
				case idfaDeclaration
				case platform
				case releaseType
				case routingAppCoverage
				case usesIdfa
				case versionString
			}

			public enum FieldsAppCustomProductPages: String, Codable, CaseIterable {
				case app
				case appCustomProductPageVersions
				case appStoreVersionTemplate
				case customProductPageTemplate
				case name
				case url
				case visible
			}

			public enum FieldsAppEvents: String, Codable, CaseIterable {
				case app
				case archivedTerritorySchedules
				case badge
				case deepLink
				case eventState
				case localizations
				case primaryLocale
				case priority
				case purchaseRequirement
				case purpose
				case referenceName
				case territorySchedules
			}

			public enum FieldsTerritories: String, Codable, CaseIterable {
				case currency
			}

			public enum FieldsPerfPowerMetrics: String, Codable, CaseIterable {
				case deviceType
				case metricType
				case platform
			}

			public enum FieldsBuilds: String, Codable, CaseIterable {
				case app
				case appEncryptionDeclaration
				case appStoreVersion
				case betaAppReviewSubmission
				case betaBuildLocalizations
				case betaGroups
				case buildAudienceType
				case buildBetaDetail
				case buildBundles
				case computedMinMacOsVersion
				case diagnosticSignatures
				case expirationDate
				case expired
				case iconAssetToken
				case icons
				case individualTesters
				case lsMinimumSystemVersion
				case minOsVersion
				case perfPowerMetrics
				case preReleaseVersion
				case processingState
				case uploadedDate
				case usesNonExemptEncryption
				case version
			}

			public init(fieldsApps: [FieldsApps]? = nil, include: [Include]? = nil, fieldsBetaLicenseAgreements: [FieldsBetaLicenseAgreements]? = nil, fieldsBetaAppReviewDetails: [FieldsBetaAppReviewDetails]? = nil, fieldsAppClips: [FieldsAppClips]? = nil, fieldsAppInfos: [FieldsAppInfos]? = nil, fieldsBetaAppLocalizations: [FieldsBetaAppLocalizations]? = nil, fieldsAppPricePoints: [FieldsAppPricePoints]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases]? = nil, fieldsPreReleaseVersions: [FieldsPreReleaseVersions]? = nil, fieldsCiProducts: [FieldsCiProducts]? = nil, fieldsReviewSubmissions: [FieldsReviewSubmissions]? = nil, fieldsAppPrices: [FieldsAppPrices]? = nil, fieldsAppPreOrders: [FieldsAppPreOrders]? = nil, fieldsBetaGroups: [FieldsBetaGroups]? = nil, fieldsGameCenterEnabledVersions: [FieldsGameCenterEnabledVersions]? = nil, fieldsEndUserLicenseAgreements: [FieldsEndUserLicenseAgreements]? = nil, fieldsAppStoreVersions: [FieldsAppStoreVersions]? = nil, fieldsAppCustomProductPages: [FieldsAppCustomProductPages]? = nil, fieldsAppEvents: [FieldsAppEvents]? = nil, fieldsTerritories: [FieldsTerritories]? = nil, fieldsPerfPowerMetrics: [FieldsPerfPowerMetrics]? = nil, fieldsBuilds: [FieldsBuilds]? = nil, limitAppClips: Int? = nil, limitAppCustomProductPages: Int? = nil, limitAppEvents: Int? = nil, limitAppInfos: Int? = nil, limitAppStoreVersions: Int? = nil, limitAvailableTerritories: Int? = nil, limitBetaAppLocalizations: Int? = nil, limitBetaGroups: Int? = nil, limitBuilds: Int? = nil, limitGameCenterEnabledVersions: Int? = nil, limitInAppPurchases: Int? = nil, limitPreReleaseVersions: Int? = nil, limitPrices: Int? = nil, limitReviewSubmissions: Int? = nil) {
				self.fieldsApps = fieldsApps
				self.include = include
				self.fieldsBetaLicenseAgreements = fieldsBetaLicenseAgreements
				self.fieldsBetaAppReviewDetails = fieldsBetaAppReviewDetails
				self.fieldsAppClips = fieldsAppClips
				self.fieldsAppInfos = fieldsAppInfos
				self.fieldsBetaAppLocalizations = fieldsBetaAppLocalizations
				self.fieldsAppPricePoints = fieldsAppPricePoints
				self.fieldsInAppPurchases = fieldsInAppPurchases
				self.fieldsPreReleaseVersions = fieldsPreReleaseVersions
				self.fieldsCiProducts = fieldsCiProducts
				self.fieldsReviewSubmissions = fieldsReviewSubmissions
				self.fieldsAppPrices = fieldsAppPrices
				self.fieldsAppPreOrders = fieldsAppPreOrders
				self.fieldsBetaGroups = fieldsBetaGroups
				self.fieldsGameCenterEnabledVersions = fieldsGameCenterEnabledVersions
				self.fieldsEndUserLicenseAgreements = fieldsEndUserLicenseAgreements
				self.fieldsAppStoreVersions = fieldsAppStoreVersions
				self.fieldsAppCustomProductPages = fieldsAppCustomProductPages
				self.fieldsAppEvents = fieldsAppEvents
				self.fieldsTerritories = fieldsTerritories
				self.fieldsPerfPowerMetrics = fieldsPerfPowerMetrics
				self.fieldsBuilds = fieldsBuilds
				self.limitAppClips = limitAppClips
				self.limitAppCustomProductPages = limitAppCustomProductPages
				self.limitAppEvents = limitAppEvents
				self.limitAppInfos = limitAppInfos
				self.limitAppStoreVersions = limitAppStoreVersions
				self.limitAvailableTerritories = limitAvailableTerritories
				self.limitBetaAppLocalizations = limitBetaAppLocalizations
				self.limitBetaGroups = limitBetaGroups
				self.limitBuilds = limitBuilds
				self.limitGameCenterEnabledVersions = limitGameCenterEnabledVersions
				self.limitInAppPurchases = limitInAppPurchases
				self.limitPreReleaseVersions = limitPreReleaseVersions
				self.limitPrices = limitPrices
				self.limitReviewSubmissions = limitReviewSubmissions
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsApps, forKey: "fields[apps]")
				encoder.encode(include, forKey: "include")
				encoder.encode(fieldsBetaLicenseAgreements, forKey: "fields[betaLicenseAgreements]")
				encoder.encode(fieldsBetaAppReviewDetails, forKey: "fields[betaAppReviewDetails]")
				encoder.encode(fieldsAppClips, forKey: "fields[appClips]")
				encoder.encode(fieldsAppInfos, forKey: "fields[appInfos]")
				encoder.encode(fieldsBetaAppLocalizations, forKey: "fields[betaAppLocalizations]")
				encoder.encode(fieldsAppPricePoints, forKey: "fields[appPricePoints]")
				encoder.encode(fieldsInAppPurchases, forKey: "fields[inAppPurchases]")
				encoder.encode(fieldsPreReleaseVersions, forKey: "fields[preReleaseVersions]")
				encoder.encode(fieldsCiProducts, forKey: "fields[ciProducts]")
				encoder.encode(fieldsReviewSubmissions, forKey: "fields[reviewSubmissions]")
				encoder.encode(fieldsAppPrices, forKey: "fields[appPrices]")
				encoder.encode(fieldsAppPreOrders, forKey: "fields[appPreOrders]")
				encoder.encode(fieldsBetaGroups, forKey: "fields[betaGroups]")
				encoder.encode(fieldsGameCenterEnabledVersions, forKey: "fields[gameCenterEnabledVersions]")
				encoder.encode(fieldsEndUserLicenseAgreements, forKey: "fields[endUserLicenseAgreements]")
				encoder.encode(fieldsAppStoreVersions, forKey: "fields[appStoreVersions]")
				encoder.encode(fieldsAppCustomProductPages, forKey: "fields[appCustomProductPages]")
				encoder.encode(fieldsAppEvents, forKey: "fields[appEvents]")
				encoder.encode(fieldsTerritories, forKey: "fields[territories]")
				encoder.encode(fieldsPerfPowerMetrics, forKey: "fields[perfPowerMetrics]")
				encoder.encode(fieldsBuilds, forKey: "fields[builds]")
				encoder.encode(limitAppClips, forKey: "limit[appClips]")
				encoder.encode(limitAppCustomProductPages, forKey: "limit[appCustomProductPages]")
				encoder.encode(limitAppEvents, forKey: "limit[appEvents]")
				encoder.encode(limitAppInfos, forKey: "limit[appInfos]")
				encoder.encode(limitAppStoreVersions, forKey: "limit[appStoreVersions]")
				encoder.encode(limitAvailableTerritories, forKey: "limit[availableTerritories]")
				encoder.encode(limitBetaAppLocalizations, forKey: "limit[betaAppLocalizations]")
				encoder.encode(limitBetaGroups, forKey: "limit[betaGroups]")
				encoder.encode(limitBuilds, forKey: "limit[builds]")
				encoder.encode(limitGameCenterEnabledVersions, forKey: "limit[gameCenterEnabledVersions]")
				encoder.encode(limitInAppPurchases, forKey: "limit[inAppPurchases]")
				encoder.encode(limitPreReleaseVersions, forKey: "limit[preReleaseVersions]")
				encoder.encode(limitPrices, forKey: "limit[prices]")
				encoder.encode(limitReviewSubmissions, forKey: "limit[reviewSubmissions]")
				return encoder.items
			}
		}

		public func patch(_ body: AppStoreConnect_Swift_SDK.AppUpdateRequest) -> Request<AppStoreConnect_Swift_SDK.AppResponse> {
			.patch(path, body: body)
		}
	}
}
